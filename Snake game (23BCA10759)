#include <iostream>
#include <conio.h> // For getch() and kbhit()
#include <windows.h> // For Sleep() and Clear screen
#include <vector>

using namespace std;

// Directions
enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };

// Snake class
class Snake {
public:
    Snake(int width, int height);
    void Setup();
    void Draw();
    void Input();
    void Logic();
    bool IsGameOver() { return gameOver; }
    void Reset();

private:
    int width, height;
    int x, y, fruitX, fruitY, score;
    vector<pair<int, int>> tail;
    int tailLength;
    Direction dir;
    bool gameOver;
};

Snake::Snake(int w, int h) : width(w), height(h) {
    Setup();
}

void Snake::Setup() {
    gameOver = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    fruitX = rand() % width;
    fruitY = rand() % height;
    score = 0;
    tailLength = 0;
    tail.clear();
}

void Snake::Draw() {
    system("cls"); // Clear the console
    for (int i = 0; i < width + 2; i++) cout << "#";
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (j == 0) cout << "#"; // Wall on the left
            if (i == y && j == x) cout << "O"; // Snake head
            else if (i == fruitY && j == fruitX) cout << "F"; // Fruit
            else {
                bool print = false;
                for (auto segment : tail) {
                    if (segment.first == j && segment.second == i) {
                        cout << "o"; // Snake body
                        print = true;
                    }
                }
                if (!print) cout << " ";
            }
            if (j == width - 1) cout << "#"; // Wall on the right
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++) cout << "#";
    cout << endl;
    cout << "Score: " << score << endl;
}

void Snake::Input() {
    if (_kbhit()) {
        switch (_getch()) {
            case 'a':
                dir = LEFT;
                break;
            case 'd':
                dir = RIGHT;
                break;
            case 'w':
                dir = UP;
                break;
            case 's':
                dir = DOWN;
                break;
            case 'x':
                gameOver = true;
                break;
        }
    }
}

void Snake::Logic() {
    int prevX = tail.empty() ? x : tail.front().first;
    int prevY = tail.empty() ? y : tail.front().second;
    int prev2X, prev2Y;
    if (!tail.empty()) {
        prev2X = tail.front().first;
        prev2Y = tail.front().second;
        tail[0].first = x;
        tail[0].second = y;
    }

    switch (dir) {
        case LEFT:
            x--;
            break;
        case RIGHT:
            x++;
            break;
        case UP:
            y--;
            break;
        case DOWN:
            y++;
            break;
        default:
            break;
    }

    // Check for boundaries
    if (x >= width) x = 0; else if (x < 0) x = width - 1;
    if (y >= height) y = 0; else if (y < 0) y = height - 1;

    // Check if snake has eaten fruit
    if (x == fruitX && y == fruitY) {
        score += 10;
        fruitX = rand() % width;
        fruitY = rand() % height;
        tailLength++;
    }

    // Move the tail
    for (int i = 0; i < tailLength; i++) {
        swap(prevX, tail[i].first);
        swap(prevY, tail[i].second);
    }

    // Check for collision with tail
    for (int i = 0; i < tailLength; i++) {
        if (tail[i].first == x && tail[i].second == y) {
            gameOver = true;
        }
    }
}

void Snake::Reset() {
    Setup();
}

int main() {
    Snake snake(20, 20);

    while (!snake.IsGameOver()) {
        snake.Draw();
        snake.Input();
        snake.Logic();
        Sleep(100); // Control the speed of the game
    }

    cout << "Game Over! Your final score was: " << snake.score << endl;
    return 0;
}
